name: Deploy and Test Cluster
run-name: >
  ${{ github.workflow }}: ${{ github.event_name }} for ${{ github.ref_name }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'Version to deploy'
        required: true
      helm-chart-version:
        type: string
        description: 'Helm Chart Version'
        required: true
      namespace:
        type: string
        description: 'Namespace'
        required: true
      deployed-by-build:
        type: string
        description: 'Build number of trigger build'
        required: true
        default: 'None'
      deployed-by-workflow:
        type: string
        description: 'Name of trigger workflow'
        required: true
        default: 'None'

jobs:
  deploy-app-with-kubectl:
    runs-on: ubuntu-latest
    steps:
      - name: Show Version
        run: |
          echo "Deploying Version: ${{ inputs.version }}"
          echo "Deployment triggered by workflow ${{ inputs.deployed-by-workflow }}. Run number: ${{ inputs.deployed-by-build }}"

      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.12.0

      - name: Deploy application
        run: |
          # Replace the version placeholder in the deployment manifest
          sed -i 's/${VERSION.TO.REPLACE}/${{ inputs.version }}/g' k8s/app.yml
          kubectl apply -f k8s/

      - name: Wait for Pods to be ready
        run: |
          if ! kubectl wait --for=condition=ready pod -l app=spring-6-project-template --timeout=180s; then
            echo "Pod did not become ready within 180 seconds. Displaying logs:"
            kubectl get pods -l app=spring-6-project-template
            POD_NAME=$(kubectl get pods -l app=spring-6-project-template -o jsonpath="{.items[0].metadata.name}")
            kubectl logs $POD_NAME
            echo "Describing the pod:"
            kubectl describe pod $POD_NAME
            exit 1
          fi
          BUILD_LINK="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.deployed-by-build }}"
          echo "::notice:: ### Deployed Version: ${{ inputs.version }}"
          echo "::notice:: ### Deployment triggered by workflow ${{ inputs.deployed-by-workflow }}. Run number: ${{ inputs.deployed-by-build }}: $BUILD_LINK"

      - name: Display Deployment Information
        if: always()
        run: |
          echo "Deployment Information:"
          kubectl get deployment spring-6-project-template -o yaml

  deploy-app-with-helm:
    runs-on: ubuntu-latest
    needs: deploy-app-with-kubectl

    steps:
      - name: Show Version
        run: |
          echo "Deploying Applicaion with Version: ${{ inputs.version }}, Helm chart version: ${{ inputs.helm-chart-version }}, to namespace ${{ inputs.namespace }}"
          echo "Deployment triggered by workflow ${{ inputs.deployed-by-workflow }}. Run number: ${{ inputs.deployed-by-build }}"

      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.12.0

      - name: Pull Helm Chart
        env:
          HELM_CHART_VERSION: ${{ inputs.helm-chart-version }}
          DOCKER_USER: ${{ vars.DOCKER_USER }}
        run: |
          echo "Pulling Helm Chart Version: $HELM_CHART_VERSION"
          helm pull oci://registry-1.docker.io/$DOCKER_USER/spring-6-project-template --version "$HELM_CHART_VERSION"
          tar -xvf spring-6-project-template-*.tgz  

      - name: Deploy application with Helm
        env:
          APP_VERSION: ${{ inputs.version }}
        run: |
          # Install/upgrade the Helm chart
          echo "Deploying Application: $APP_VERSION"
          helm upgrade --install spring-6-project-template ./spring-6-project-template \
          --set image.tag=${APP_VERSION} \
          --wait --timeout 5m \
          --debug

      - name: Wait for Pods to be ready
        env:
          NAMESPACE: ${{ inputs.namespace }}
        run: |
          if ! kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=spring-6-project-template -n $NAMESPACE --timeout=180s; then
            POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=spring-6-project-template -o jsonpath="{.items[0].metadata.name}" -n $NAMESPACE)
            kubectl logs $POD_NAME -n $NAMESPACE
            echo "Describing the pod:"
            kubectl describe pod $POD_NAME -n $NAMESPACE
            exit 1
          fi
          BUILD_LINK="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.deployed-by-build }}"
          echo "::notice:: ### Helm Deployed Version: ${{ inputs.version }}"
          echo "::notice:: ### Deployment triggered by workflow ${{ inputs.deployed-by-workflow }}. Run number: ${{ inputs.deployed-by-build }}: $BUILD_LINK"

      - name: Display Deployment Information
        env:
          NAMESPACE: ${{ inputs.namespace }}
        if: always()
        run: |
          echo "Deployment Information:"
          
          echo "--- Get all namespaces"
          kubectl get all --all-namespaces
          
          echo "--- Describe all pods"
          kubectl describe pods --all-namespaces
          
          echo "--- Helm list all namespaces:"
          helm list --all-namespaces
          
          echo "--- Helm get app:"
          helm get all spring-6-project-template   
          
          echo "--- Show Events"
          kubectl get events --sort-by=.metadata.creationTimestamp --all-namespaces
          
          echo "--- Show Logs (if pods exist)"
          PODS=$(kubectl get pods -l app.kubernetes.io/name=spring-6-project-template -o jsonpath="{.items[*].metadata.name}" -n $NAMESPACE)
          if [ -n "$PODS" ]; then
            for POD in $PODS; do
              echo "Logs for pod $POD:"
              kubectl logs $POD -n $NAMESPACE --all-containers
            done
          else
            echo "No pods found with label app.kubernetes.io/name=spring-6-project-template in $NAMESPACE namespace"
            echo "Listing all pods in $NAMESPACE namespace:"
            kubectl get pods -n $NAMESPACE
          fi
